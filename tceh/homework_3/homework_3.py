# **Задачи на обработку ошибок:
# 1.Пользователь вводит число, если оно четное - выбрасываем исключение ValueError,
# если оно меньше 0 - TypeError, если оно больше 10 - IndexError. Обрабатываем ошибку, говорим пользователю, в чем его ошибка

try:
    user_input = int(input('Введите число >>> '))

    if user_input % 2 == 0:
        raise ValueError('Ошибка! Введенное число - четное.')
    elif user_input < 0:
        raise TypeError('Ошибка! Введенное число - меньше 0.')
    elif user_input > 10:
        raise IndexError('Ошибка! Введенное число - больше 10.')

except ValueError as e:
    print(e)
except TypeError as e:
    print(e)
except IndexError as e:
    print(e)


# 2. Создайте список произвольной длины. Пользователь должен ввести индекс объекта, который хочет посмотреть.
# Если все хорошо - пишите объект в консоль. Если нет - обработайте возмозможные ошибки и скажите ему, что не так

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]

try:
    user_input = int(input('Введите индкс объекта >>> '))
    print(l[user_input])

except IndexError as e:
    print('Для введенного индекса нет объекта в массиве!')
    print(e)
except ValueError as e:
    print('Необходимо ввести число!')
    print(e)


# **Задачи на закрепление функций:
# 1.Написать функцию, которая принимает на вход два аргумента. Если аргументы больше нуля, возвращаем их сумму.
# Если оба меньше - разность. Если знаки разные - возвращаем 0

def himera(a, b):
    if a > 0 and b > 0:
        return a + b
    elif a < 0 and b < 0:
        return a - b
    else:
        return 0

print(himera(10, 24))
print(himera(-10, -24))
print(himera(10, -24))

# 2.Написать функцию, которая принимает 3 аргумента - числа, найти среди них два максимальных, вывести в консоль

def two_max(a, b, c):
    return sorted([int(a), int(b), int(c)])[0:2]

print(two_max(56, 12, 45))

# 3.Написать функцию, которая принимает два аргумента.
# Первый - список чисел, второй - булевый флаг. Если флаг действителен - возвращаем новый
# список с нечетными числами из входного списка, если флаг отрицателен - возвращаем новый
# список с четными числами из входного списка

def numbers_boolean(*args, flg = True):
    if flg == True:
        return [w for w in args if w % 2 != 0]
    else:
        return [w for w in args if w % 2 == 0]

print(numbers_boolean(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))
print(numbers_boolean(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, flg = False))

# **Задачи на закрепление типов аргументов:
# 1.Написать функцию, которая принимает любое количество аргументов чисел.
# Среди них она находит максимальное и минимальное. И возвращает оба

def min_max(*args):
    return min(args), max(args)

print(min_max(1, 2, 3, 4, 5, 6, 7, 8, 9))


# 2.Написать функцию, которая принимает два аргумента: строка и булевый флаг case по-умолчанию равный True.
# Если флаг действителен: возвращаем новую строку, где каждый символ входной приведен к верхнему регистру,
# иначе - к нижнему

def upper_case(str, upper_flg = True):
    if upper_flg == True:
        return str.upper()
    else:
        return str.lower()

print(upper_case('This is a string.'))
print(upper_case('This is a string.', upper_flg = False))


# 3.Написать функцию, которая принимает любое количество позиционных аргументов - строк и один
# парматер по-умолчанию glue, который равен ':'. Соединить все строки таким образом,
# чтобы в результат попали все строки, длинее 3 символов. Для соединения между любых двух
# строк вставлять glue

def join_str(*args, glue = ':'):
    return glue.join(args)

print(join_str('a', 'b', 'c', 'd', 'e', 'f', 'g'))
print(join_str('a', 'b', 'c', 'd', 'e', 'f', 'g', glue = '.'))